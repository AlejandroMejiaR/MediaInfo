import { onGetPosts, saveComment, onGetComments, getPost } from \"./firebase.js\";\nimport { where, doc, getDoc, Timestamp } from \"https://www.gstatic.com/firebasejs/10.5.2/firebase-firestore.js\";\nimport { onAuthStateChanged } from \"https://www.gstatic.com/firebasejs/10.5.2/firebase-auth.js\";\nimport { auth, db } from './firebase.js';\n\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst createItems = document.querySelectorAll('.create');\nconst adminItems = document.querySelectorAll('.admin');\n\nlet currentUserId = null;\n\n// --- Lógica de Roles y UI Global ---\nconst setupUIForUser = async (user) => {\n    if (user) {\n        currentUserId = user.uid;\n        const userDocRef = doc(db, \"users\", user.uid);\n        const userDocSnap = await getDoc(userDocRef);\n\n        if (userDocSnap.exists()) {\n            const role = userDocSnap.data().rol;\n            if (role === \"Lector\") {\n                createItems.forEach(item => item.style.display = 'none');\n                adminItems.forEach(item => item.style.display = 'none');\n            } else if (role === \"Autor\") {\n                adminItems.forEach(item => item.style.display = 'none');\n            }\n        } else {\n            createItems.forEach(item => item.style.display = 'none');\n            adminItems.forEach(item => item.style.display = 'none');\n        }\n    } else {\n        currentUserId = null;\n        createItems.forEach(item => item.style.display = 'none');\n        adminItems.forEach(item => item.style.display = 'none');\n    }\n};\n\n// --- Carga de Artículos y Eventos ---\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n    onAuthStateChanged(auth, user => {\n        setupUIForUser(user).then(() => {\n            loadPosts();\n        });\n    });\n});\n\nconst loadPosts = () => {\n    onGetPosts((querySnapshot) => {\n        let html = \"\";\n        querySnapshot.forEach((doc) => {\n            const task = doc.data();\n            html += renderTask(doc.id, task);\n        });\n        tasksContainer.innerHTML = html;\n    });\n};\n\nconst renderTask = (id, task) => {\n    const isAuthor = currentUserId && currentUserId === task.authorId;\n    const editButton = isAuthor \n        ? `<button class=\"btn btn-secondary btn-sm btn-edit\">Editar</button>`\n        : '';\n\n    return `\n    <div class=\"col-lg-4 col-md-6 col-12 mb-4\" data-id=\"${id}\">\n        <div class=\"card h-100 shadow-sm\"> \n            <img src=\"${task.imageUrl}\" class=\"card-img-top\" alt=\"imagenArticulo\" style=\"height: 200px; object-fit: cover;\">\n            <div class=\"card-body d-flex flex-column\">\n                <div class=\"d-flex justify-content-between mb-2 text-muted\">\n                    <small>${task.autor}</small>\n                    <small>${task.fecha}</small>\n                </div>\n                <h5 class=\"card-title\">${task.title}</h5>\n                <p class=\"card-text flex-grow-1\">${task.description.substring(0, 100)}...</p>\n                <div class=\"d-flex justify-content-between align-items-center\">\n                    <div class=\"btn-group\">\n                        <button class=\"btn btn-sm btn-outline-dark btn-read-more\">Leer Más</button>\n                        <button class=\"btn btn-sm btn-outline-dark btn-comment\" data-bs-toggle=\"modal\" data-bs-target=\"#commentsModal\">Comentarios</button>\n                    </div>\n                    ${editButton}\n                </div>\n            </div>\n        </div>\n    </div>`;\n};\n\ndocument.body.addEventListener('click', async (event) => {\n    const target = event.target;\n    const card = target.closest('[data-id]');\n    if (!card) return;\n    const postId = card.dataset.id;\n\n    if (target.classList.contains('btn-edit')) {\n        window.location.href = \`crearArticulo.html?id=${postId}\`;\n    }\n\n    if (target.classList.contains('btn-read-more')) {\n        const docSnap = await getPost(postId);\n        if (docSnap.exists()) {\n            const postData = docSnap.data();\n            \n            const modalTitle = document.getElementById('readMoreModalLabel');\n            const modalBody = document.getElementById('readMoreModalBody');\n\n            modalTitle.textContent = postData.title;\n            modalBody.innerHTML = \`\n                <img src=\"${postData.imageUrl}\" class=\"img-fluid mb-3\" alt=\"Imagen del artículo\">\n                <p style=\"white-space: pre-wrap;\">${postData.description}</p>\n            \`;\n\n            const readMoreModal = new bootstrap.Modal(document.getElementById('readMoreModal'));\n            readMoreModal.show();\n        }\n    }\n});\n\n// --- Lógica del Modal de Comentarios ---\nconst commentsModal = document.getElementById('commentsModal');\nconst commentForm = document.getElementById('comment-form');\nlet unsubscribeComments; \n\nif (commentsModal) {\n    commentsModal.addEventListener('show.bs.modal', event => {\n        const button = event.relatedTarget;\n        const card = button.closest('[data-id]');\n        const postId = card.dataset.id;\n        commentForm.dataset.postId = postId;\n\n        const commentsList = commentsModal.querySelector('#comments-list');\n\n        unsubscribeComments = onGetComments(postId, (querySnapshot) => {\n            commentsList.innerHTML = ''; \n            if (querySnapshot.empty) {\n                commentsList.innerHTML = \`<p class=\"text-center\">No hay comentarios aún. ¡Sé el primero!</p>\`;\n            } else {\n                querySnapshot.forEach(doc => {\n                    const comment = doc.data();\n                    const date = comment.createdAt.toDate().toLocaleString();\n                    const commentHTML = \`\n                        <div class=\"card mb-2\">\n                            <div class=\"card-body\">\n                                <p class=\"card-text\">${comment.text}</p>\n                                <footer class=\"blockquote-footer text-end\">${comment.authorName} <cite title=\"Source Title\">- ${date}</cite></footer>\n                            </div>\n                        </div>\n                    \`;\n                    commentsList.innerHTML += commentHTML;\n                });\n            }\n        });\n    });\n\n    commentsModal.addEventListener('hide.bs.modal', () => {\n        if (unsubscribeComments) {\n            unsubscribeComments();\n        }\n        const commentsList = commentsModal.querySelector('#comments-list');\n        commentsList.innerHTML = \"\";\n    });\n}\n\nif (commentForm) {\n    commentForm.addEventListener('submit', async (e) => {\n        e.preventDefault();\n\n        const postId = commentForm.dataset.postId;\n        const commentText = commentForm.querySelector('#comment-text').value;\n        const user = auth.currentUser;\n\n        if (!user) {\n            alert(\"Debes iniciar sesión para comentar.\");\n            return;\n        }\n\n        if (commentText.trim() === \"\") return;\n\n        try {\n            const userDoc = await getDoc(doc(db, \"users\", user.uid));\n            const authorName = userDoc.exists() ? userDoc.data().name : \"Anónimo\";\n\n            const commentData = {\n                authorId: user.uid,\n                authorName: authorName,\n                text: commentText,\n                createdAt: Timestamp.now()\n            };\n\n            await saveComment(postId, commentData);\n            commentForm.reset();\n        } catch (error) {\n            console.error(\"Error al guardar el comentario:\", error);\n            alert(\"Hubo un error al enviar tu comentario.\");\n        }\n    });\n}